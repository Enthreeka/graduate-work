@startuml
'https://plantuml.com/sequence-diagram


autonumber

box <size:18>"Алгоритм кеширования"

participant "<size:18>Клиент" as cl
participant "<size:18>Прокси сервис" as proxy
participant "<size:18>Сервис агрегации запросов" as agregator
participant "<size:18>PostgreSQL" as postgres
participant "<size:18>Redis" as redis
participant "<size:18>Поисковый сервис" as search
participant "<size:18>Elisticsearch" as elastic

cl -> proxy: <size:18>POST /v1/api/movie/search?query=&cache=</size>
activate proxy
activate cl

proxy -> redis: <size:18>Поиск по ключу api+query
activate redis

redis --> proxy:  <size:18>Ответ с данными</size>
deactivate redis

alt <size:18>Запрос найден в Redis

proxy -> agregator: <size:18>Запрос с ключом api+query
activate agregator

agregator -> redis: <size:18>Поиск по ключу api+query
activate redis

redis --> agregator: <size:18>Массив с id элементов []int64
deactivate redis

agregator -> postgres: <size:18>Поиск по id через WHERE id = ANY($1)
activate postgres

postgres --> agregator: <size:18>Массив сущности []pb.Movie
deactivate postgres

agregator --> proxy: <size:18>Массив сущности []pb.Movie
deactivate agregator

proxy --> cl: <size:18>HTTP Status, JSON

else <size:18>Запрос не найден в Redis

proxy -> search: <size:18>Запрос с query
activate search

search -> elastic: <size:18>Поиск по значению query
activate elastic


alt <size:18>Запрос найден в Elisticsearch

elastic --> search: <size:18>Массив сущности []pb.Movie

opt <size:18>Cache из запроса true
search -> redis: <size:18>Создать пару api+query:[]int64
activate redis
deactivate redis
end

search --> proxy: <size:18>Массив сущности []pb.Movie

proxy --> cl: <size:18>HTTP Status, JSON

else <size:18>Запрос не найден в Elisticsearch

elastic --> search: <size:18>Пустой массив сущности []pb.Movie

search --> proxy: <size:18>Пустой массив сущности []pb.Movie

proxy --> cl: <size:18>HTTP Status, JSON


deactivate search
deactivate elastic


end
end

@enduml