// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: UpdateMovieData.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpdateMovieDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMovieDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMovieDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMovieDataRequestMultiError, or nil if none found.
func (m *UpdateMovieDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMovieDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMovie()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMovieDataRequestValidationError{
					field:  "Movie",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMovieDataRequestValidationError{
					field:  "Movie",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMovie()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMovieDataRequestValidationError{
				field:  "Movie",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMovieDataRequestMultiError(errors)
	}

	return nil
}

// UpdateMovieDataRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMovieDataRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMovieDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMovieDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMovieDataRequestMultiError) AllErrors() []error { return m }

// UpdateMovieDataRequestValidationError is the validation error returned by
// UpdateMovieDataRequest.Validate if the designated constraints aren't met.
type UpdateMovieDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMovieDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMovieDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMovieDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMovieDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMovieDataRequestValidationError) ErrorName() string {
	return "UpdateMovieDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMovieDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMovieDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMovieDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMovieDataRequestValidationError{}

// Validate checks the field values on UpdateMovieDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMovieDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMovieDataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMovieDataResponseMultiError, or nil if none found.
func (m *UpdateMovieDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMovieDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateMovieDataResponseMultiError(errors)
	}

	return nil
}

// UpdateMovieDataResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateMovieDataResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateMovieDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMovieDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMovieDataResponseMultiError) AllErrors() []error { return m }

// UpdateMovieDataResponseValidationError is the validation error returned by
// UpdateMovieDataResponse.Validate if the designated constraints aren't met.
type UpdateMovieDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMovieDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMovieDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMovieDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMovieDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMovieDataResponseValidationError) ErrorName() string {
	return "UpdateMovieDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMovieDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMovieDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMovieDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMovieDataResponseValidationError{}
