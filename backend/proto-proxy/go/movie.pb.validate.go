// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: movie.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Movie with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Movie) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Movie with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MovieMultiError, or nil if none found.
func (m *Movie) ValidateAll() error {
	return m.validate(true)
}

func (m *Movie) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Id

	// no validation rules for Budget

	// no validation rules for Homepage

	// no validation rules for OriginalLanguage

	// no validation rules for Overview

	// no validation rules for ReleaseDate

	// no validation rules for Runtime

	for idx, item := range m.GetSimilar() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MovieValidationError{
						field:  fmt.Sprintf("Similar[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MovieValidationError{
						field:  fmt.Sprintf("Similar[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MovieValidationError{
					field:  fmt.Sprintf("Similar[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetWriters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MovieValidationError{
						field:  fmt.Sprintf("Writers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MovieValidationError{
						field:  fmt.Sprintf("Writers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MovieValidationError{
					field:  fmt.Sprintf("Writers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCast() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MovieValidationError{
						field:  fmt.Sprintf("Cast[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MovieValidationError{
						field:  fmt.Sprintf("Cast[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MovieValidationError{
					field:  fmt.Sprintf("Cast[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MovieMultiError(errors)
	}

	return nil
}

// MovieMultiError is an error wrapping multiple validation errors returned by
// Movie.ValidateAll() if the designated constraints aren't met.
type MovieMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MovieMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MovieMultiError) AllErrors() []error { return m }

// MovieValidationError is the validation error returned by Movie.Validate if
// the designated constraints aren't met.
type MovieValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MovieValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MovieValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MovieValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MovieValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MovieValidationError) ErrorName() string { return "MovieValidationError" }

// Error satisfies the builtin error interface
func (e MovieValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMovie.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MovieValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MovieValidationError{}

// Validate checks the field values on Similar with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Similar) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Similar with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SimilarMultiError, or nil if none found.
func (m *Similar) ValidateAll() error {
	return m.validate(true)
}

func (m *Similar) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	if len(errors) > 0 {
		return SimilarMultiError(errors)
	}

	return nil
}

// SimilarMultiError is an error wrapping multiple validation errors returned
// by Similar.ValidateAll() if the designated constraints aren't met.
type SimilarMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SimilarMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SimilarMultiError) AllErrors() []error { return m }

// SimilarValidationError is the validation error returned by Similar.Validate
// if the designated constraints aren't met.
type SimilarValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimilarValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimilarValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimilarValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimilarValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimilarValidationError) ErrorName() string { return "SimilarValidationError" }

// Error satisfies the builtin error interface
func (e SimilarValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimilar.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimilarValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimilarValidationError{}

// Validate checks the field values on Writers with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Writers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Writers with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in WritersMultiError, or nil if none found.
func (m *Writers) ValidateAll() error {
	return m.validate(true)
}

func (m *Writers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return WritersMultiError(errors)
	}

	return nil
}

// WritersMultiError is an error wrapping multiple validation errors returned
// by Writers.ValidateAll() if the designated constraints aren't met.
type WritersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WritersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WritersMultiError) AllErrors() []error { return m }

// WritersValidationError is the validation error returned by Writers.Validate
// if the designated constraints aren't met.
type WritersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WritersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WritersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WritersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WritersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WritersValidationError) ErrorName() string { return "WritersValidationError" }

// Error satisfies the builtin error interface
func (e WritersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WritersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WritersValidationError{}

// Validate checks the field values on Cast with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Cast) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Cast with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CastMultiError, or nil if none found.
func (m *Cast) ValidateAll() error {
	return m.validate(true)
}

func (m *Cast) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return CastMultiError(errors)
	}

	return nil
}

// CastMultiError is an error wrapping multiple validation errors returned by
// Cast.ValidateAll() if the designated constraints aren't met.
type CastMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CastMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CastMultiError) AllErrors() []error { return m }

// CastValidationError is the validation error returned by Cast.Validate if the
// designated constraints aren't met.
type CastValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CastValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CastValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CastValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CastValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CastValidationError) ErrorName() string { return "CastValidationError" }

// Error satisfies the builtin error interface
func (e CastValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCast.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CastValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CastValidationError{}
