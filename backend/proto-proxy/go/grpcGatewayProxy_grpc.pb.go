// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: grpcGatewayProxy.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ELKProxyService_GetSearchInfo_FullMethodName = "/proxy_proto.ELKProxyService/GetSearchInfo"
)

// ELKProxyServiceClient is the client API for ELKProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ELKProxyServiceClient interface {
	GetSearchInfo(ctx context.Context, in *GetSearchInfoRequest, opts ...grpc.CallOption) (*GetSearchInfoResponse, error)
}

type eLKProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewELKProxyServiceClient(cc grpc.ClientConnInterface) ELKProxyServiceClient {
	return &eLKProxyServiceClient{cc}
}

func (c *eLKProxyServiceClient) GetSearchInfo(ctx context.Context, in *GetSearchInfoRequest, opts ...grpc.CallOption) (*GetSearchInfoResponse, error) {
	out := new(GetSearchInfoResponse)
	err := c.cc.Invoke(ctx, ELKProxyService_GetSearchInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ELKProxyServiceServer is the server API for ELKProxyService service.
// All implementations must embed UnimplementedELKProxyServiceServer
// for forward compatibility
type ELKProxyServiceServer interface {
	GetSearchInfo(context.Context, *GetSearchInfoRequest) (*GetSearchInfoResponse, error)
	mustEmbedUnimplementedELKProxyServiceServer()
}

// UnimplementedELKProxyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedELKProxyServiceServer struct {
}

func (UnimplementedELKProxyServiceServer) GetSearchInfo(context.Context, *GetSearchInfoRequest) (*GetSearchInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchInfo not implemented")
}
func (UnimplementedELKProxyServiceServer) mustEmbedUnimplementedELKProxyServiceServer() {}

// UnsafeELKProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ELKProxyServiceServer will
// result in compilation errors.
type UnsafeELKProxyServiceServer interface {
	mustEmbedUnimplementedELKProxyServiceServer()
}

func RegisterELKProxyServiceServer(s grpc.ServiceRegistrar, srv ELKProxyServiceServer) {
	s.RegisterService(&ELKProxyService_ServiceDesc, srv)
}

func _ELKProxyService_GetSearchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ELKProxyServiceServer).GetSearchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ELKProxyService_GetSearchInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ELKProxyServiceServer).GetSearchInfo(ctx, req.(*GetSearchInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ELKProxyService_ServiceDesc is the grpc.ServiceDesc for ELKProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ELKProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxy_proto.ELKProxyService",
	HandlerType: (*ELKProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSearchInfo",
			Handler:    _ELKProxyService_GetSearchInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcGatewayProxy.proto",
}
