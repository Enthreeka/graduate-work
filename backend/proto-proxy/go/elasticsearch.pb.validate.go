// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: elasticsearch.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Shards with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Shards) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Shards with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ShardsMultiError, or nil if none found.
func (m *Shards) ValidateAll() error {
	return m.validate(true)
}

func (m *Shards) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Successful

	// no validation rules for Skipped

	// no validation rules for Failed

	if len(errors) > 0 {
		return ShardsMultiError(errors)
	}

	return nil
}

// ShardsMultiError is an error wrapping multiple validation errors returned by
// Shards.ValidateAll() if the designated constraints aren't met.
type ShardsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShardsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShardsMultiError) AllErrors() []error { return m }

// ShardsValidationError is the validation error returned by Shards.Validate if
// the designated constraints aren't met.
type ShardsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShardsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShardsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShardsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShardsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShardsValidationError) ErrorName() string { return "ShardsValidationError" }

// Error satisfies the builtin error interface
func (e ShardsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShards.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShardsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShardsValidationError{}

// Validate checks the field values on Total with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Total) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Total with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TotalMultiError, or nil if none found.
func (m *Total) ValidateAll() error {
	return m.validate(true)
}

func (m *Total) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Relation

	if len(errors) > 0 {
		return TotalMultiError(errors)
	}

	return nil
}

// TotalMultiError is an error wrapping multiple validation errors returned by
// Total.ValidateAll() if the designated constraints aren't met.
type TotalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TotalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TotalMultiError) AllErrors() []error { return m }

// TotalValidationError is the validation error returned by Total.Validate if
// the designated constraints aren't met.
type TotalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotalValidationError) ErrorName() string { return "TotalValidationError" }

// Error satisfies the builtin error interface
func (e TotalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotalValidationError{}

// Validate checks the field values on Hits with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Hits) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Hits with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HitsMultiError, or nil if none found.
func (m *Hits) ValidateAll() error {
	return m.validate(true)
}

func (m *Hits) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XIndex

	// no validation rules for XId

	// no validation rules for XScore

	if all {
		switch v := interface{}(m.GetXSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HitsValidationError{
					field:  "XSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HitsValidationError{
					field:  "XSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetXSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HitsValidationError{
				field:  "XSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HitsMultiError(errors)
	}

	return nil
}

// HitsMultiError is an error wrapping multiple validation errors returned by
// Hits.ValidateAll() if the designated constraints aren't met.
type HitsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HitsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HitsMultiError) AllErrors() []error { return m }

// HitsValidationError is the validation error returned by Hits.Validate if the
// designated constraints aren't met.
type HitsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HitsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HitsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HitsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HitsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HitsValidationError) ErrorName() string { return "HitsValidationError" }

// Error satisfies the builtin error interface
func (e HitsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHits.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HitsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HitsValidationError{}

// Validate checks the field values on TotalHits with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TotalHits) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TotalHits with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TotalHitsMultiError, or nil
// if none found.
func (m *TotalHits) ValidateAll() error {
	return m.validate(true)
}

func (m *TotalHits) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTotal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TotalHitsValidationError{
					field:  "Total",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TotalHitsValidationError{
					field:  "Total",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTotal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TotalHitsValidationError{
				field:  "Total",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MaxScore

	for idx, item := range m.GetHits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TotalHitsValidationError{
						field:  fmt.Sprintf("Hits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TotalHitsValidationError{
						field:  fmt.Sprintf("Hits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TotalHitsValidationError{
					field:  fmt.Sprintf("Hits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TotalHitsMultiError(errors)
	}

	return nil
}

// TotalHitsMultiError is an error wrapping multiple validation errors returned
// by TotalHits.ValidateAll() if the designated constraints aren't met.
type TotalHitsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TotalHitsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TotalHitsMultiError) AllErrors() []error { return m }

// TotalHitsValidationError is the validation error returned by
// TotalHits.Validate if the designated constraints aren't met.
type TotalHitsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotalHitsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotalHitsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotalHitsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotalHitsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotalHitsValidationError) ErrorName() string { return "TotalHitsValidationError" }

// Error satisfies the builtin error interface
func (e TotalHitsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotalHits.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotalHitsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotalHitsValidationError{}

// Validate checks the field values on Suggest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Suggest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Suggest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SuggestMultiError, or nil if none found.
func (m *Suggest) ValidateAll() error {
	return m.validate(true)
}

func (m *Suggest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSimplePhrase() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SuggestValidationError{
						field:  fmt.Sprintf("SimplePhrase[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SuggestValidationError{
						field:  fmt.Sprintf("SimplePhrase[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SuggestValidationError{
					field:  fmt.Sprintf("SimplePhrase[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SuggestMultiError(errors)
	}

	return nil
}

// SuggestMultiError is an error wrapping multiple validation errors returned
// by Suggest.ValidateAll() if the designated constraints aren't met.
type SuggestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestMultiError) AllErrors() []error { return m }

// SuggestValidationError is the validation error returned by Suggest.Validate
// if the designated constraints aren't met.
type SuggestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestValidationError) ErrorName() string { return "SuggestValidationError" }

// Error satisfies the builtin error interface
func (e SuggestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestValidationError{}

// Validate checks the field values on SimplePhrase with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SimplePhrase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SimplePhrase with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SimplePhraseMultiError, or
// nil if none found.
func (m *SimplePhrase) ValidateAll() error {
	return m.validate(true)
}

func (m *SimplePhrase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Length

	for idx, item := range m.GetOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SimplePhraseValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SimplePhraseValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SimplePhraseValidationError{
					field:  fmt.Sprintf("Options[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SimplePhraseMultiError(errors)
	}

	return nil
}

// SimplePhraseMultiError is an error wrapping multiple validation errors
// returned by SimplePhrase.ValidateAll() if the designated constraints aren't met.
type SimplePhraseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SimplePhraseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SimplePhraseMultiError) AllErrors() []error { return m }

// SimplePhraseValidationError is the validation error returned by
// SimplePhrase.Validate if the designated constraints aren't met.
type SimplePhraseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimplePhraseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimplePhraseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimplePhraseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimplePhraseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimplePhraseValidationError) ErrorName() string { return "SimplePhraseValidationError" }

// Error satisfies the builtin error interface
func (e SimplePhraseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimplePhrase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimplePhraseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimplePhraseValidationError{}

// Validate checks the field values on Options with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Options) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Options with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OptionsMultiError, or nil if none found.
func (m *Options) ValidateAll() error {
	return m.validate(true)
}

func (m *Options) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Text

	// no validation rules for Score

	if len(errors) > 0 {
		return OptionsMultiError(errors)
	}

	return nil
}

// OptionsMultiError is an error wrapping multiple validation errors returned
// by Options.ValidateAll() if the designated constraints aren't met.
type OptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OptionsMultiError) AllErrors() []error { return m }

// OptionsValidationError is the validation error returned by Options.Validate
// if the designated constraints aren't met.
type OptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OptionsValidationError) ErrorName() string { return "OptionsValidationError" }

// Error satisfies the builtin error interface
func (e OptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OptionsValidationError{}
